apiVersion: v1
kind: DeploymentConfig
metadata:
  labels:
    app: {{ app }}
  name: {{ app }}
  namespace: {{ namespace }}
spec:
  replicas: 1
  selector:
    deploymentconfig: {{ app }}
  strategy:
    activeDeadlineSeconds: 21600
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        deploymentconfig: {{ app }}
    spec:
{% if node_selector|default(false)|bool == true %}
      nodeSelector:
        {{ node_selector|default('"{{ app }}": "true"')|to_nice_yaml(indent=2)|indent(8)}}
{% endif %}
      containers:
      - image: {{ image_registry|default('docker-registry.default.svc:5000') }}/{{ image_namespace|default('openshift') }}/{{ image_name }}
        name: {{ app }}
{% if deploy_env|default([])|length > 0 %}
        env:
{% for (k,v) in deploy_env.items() %}
          - name: "{{ k }}"
            value: "{{ v }}"
{% endfor %}
{% endif %}
{% if liveness_probe is defined %}
        livenessProbe:
          {{ liveness_probe|to_nice_yaml(indent=2)|indent(10) }}
{% endif %}
{% if readiness_probe is defined %}
        readinessProbe:
          {{ readiness_probe|to_nice_yaml(indent=2)|indent(10) }}
{% endif %}
        ports:
{% if ports is defined %}
{% for p in ports %}
        - containerPort: {{ p.target_port }}
          protocol: {{ p.proto }}
{% endfor %}
{% endif %}
{% if (res is defined) or (res_limits is defined) %}
        resources:
{% if res is defined and (res.cpu is defined or res.mem is defined) %}
          requests:
{% if res.cpu is defined %}
            cpu: {{ res.cpu }}
{% endif %}
{% if res.mem is defined %}
            memory: {{ res.mem }}
{% endif %}
{% endif %}
{% if res_limits is defined and (res_limits.cpu is defined or res_limits.mem is defined) %}
          limits:
{% if res_limits.cpu is defined %}
            cpu: {{ res_limits.cpu }}
{% endif %}
{% if res_limits.mem is defined %}
            memory: {{ res_limits.mem }}
{% endif %}
{% endif %}
{% endif %}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
{% if volumes is defined %}
{% for v in volumes %}
        - name: vol-{{ v.name }}
          mountPath: {{ v.mount_path }}
{% endfor %}
{% endif %}
{% if configmaps is defined %}
{% for v in configmaps %}
        - name: vol-{{ v.config_name }}
          mountPath: {{ v.mount_path }}
{% endfor %}
{% endif %}
{% if secrets is defined %}
{% for v in secrets %}
        - name: vol-{{ v.secret_name }}
          mountPath: {{ v.mount_path }}
{% endfor %}
{% endif %}
      schedulerName: default-scheduler
      volumes:
{% if volumes is defined %}
{% for v in volumes %}
      - name: vol-{{ v.name }}
        persistentVolumeClaim:
          claimName: {{ v.name }}
{% endfor %}
{% endif %}
{% if configmaps is defined %}
{% for v in configmaps %}
      - name: vol-{{ v.config_name }}
        #persistentVolumeClaim:
        configMap:
          defaultMode: {{ v.mount_mode | default(0755) }}
          name: {{ v.config_name }}
{% endfor %}
{% endif %}
{% if secrets is defined %}
{% for v in secrets %}
      - name: vol-{{ v.secret_name }}
        persistentVolumeClaim:
          defaultMode: {{ v.mount_mode }}
          name: {{ v.secret_name }}
{% endfor %}
{% endif %}
{% if service_account is defined %}
      serviceAccount: {{ service_account }}
      serviceAccountName: {{ service_account }}
{% endif %}
  test: false
  triggers:
  - type: ConfigChange
  - imageChangeParams:
      automatic: true
      containerNames:
      - {{ app }}
      from:
        kind: ImageStreamTag
        name: {{ image_name }}:{{image_tag|default('latest')}}
        namespace: {{ image_namespace|default('openshift') }}
    type: ImageChange
